// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
using System;
using System.Runtime.CompilerServices;
using System.Collections;
using System.Runtime.InteropServices;
using System.Text;

namespace wit_numbers.wit.imports.test.numbers.Test
{
    public static class TestInterop {
        
        internal static class RoundtripU8WasmInterop
        {
            [DllImport("test:numbers/test", EntryPoint = "roundtrip-u8"), WasmImportLinkage]
            internal static extern int wasmImportRoundtripU8(int p0);
        }
        
        internal static unsafe byte RoundtripU8(byte a)
        {
            var result =  RoundtripU8WasmInterop.wasmImportRoundtripU8(a);
            return ((byte)result);
            
            //TODO: free alloc handle (interopString) if exists
        }
        
        internal static class RoundtripS8WasmInterop
        {
            [DllImport("test:numbers/test", EntryPoint = "roundtrip-s8"), WasmImportLinkage]
            internal static extern int wasmImportRoundtripS8(int p0);
        }
        
        internal static unsafe sbyte RoundtripS8(sbyte a)
        {
            var result =  RoundtripS8WasmInterop.wasmImportRoundtripS8(a);
            return ((sbyte)result);
            
            //TODO: free alloc handle (interopString) if exists
        }
        
        internal static class RoundtripU16WasmInterop
        {
            [DllImport("test:numbers/test", EntryPoint = "roundtrip-u16"), WasmImportLinkage]
            internal static extern int wasmImportRoundtripU16(int p0);
        }
        
        internal static unsafe ushort RoundtripU16(ushort a)
        {
            var result =  RoundtripU16WasmInterop.wasmImportRoundtripU16(a);
            return ((ushort)result);
            
            //TODO: free alloc handle (interopString) if exists
        }
        
        internal static class RoundtripS16WasmInterop
        {
            [DllImport("test:numbers/test", EntryPoint = "roundtrip-s16"), WasmImportLinkage]
            internal static extern int wasmImportRoundtripS16(int p0);
        }
        
        internal static unsafe short RoundtripS16(short a)
        {
            var result =  RoundtripS16WasmInterop.wasmImportRoundtripS16(a);
            return ((short)result);
            
            //TODO: free alloc handle (interopString) if exists
        }
        
        internal static class RoundtripU32WasmInterop
        {
            [DllImport("test:numbers/test", EntryPoint = "roundtrip-u32"), WasmImportLinkage]
            internal static extern int wasmImportRoundtripU32(int p0);
        }
        
        internal static unsafe uint RoundtripU32(uint a)
        {
            var result =  RoundtripU32WasmInterop.wasmImportRoundtripU32(unchecked((int)(a)));
            return unchecked((uint)(result));
            
            //TODO: free alloc handle (interopString) if exists
        }
        
        internal static class RoundtripS32WasmInterop
        {
            [DllImport("test:numbers/test", EntryPoint = "roundtrip-s32"), WasmImportLinkage]
            internal static extern int wasmImportRoundtripS32(int p0);
        }
        
        internal static unsafe int RoundtripS32(int a)
        {
            var result =  RoundtripS32WasmInterop.wasmImportRoundtripS32(a);
            return result;
            
            //TODO: free alloc handle (interopString) if exists
        }
        
        internal static class RoundtripU64WasmInterop
        {
            [DllImport("test:numbers/test", EntryPoint = "roundtrip-u64"), WasmImportLinkage]
            internal static extern long wasmImportRoundtripU64(long p0);
        }
        
        internal static unsafe ulong RoundtripU64(ulong a)
        {
            var result =  RoundtripU64WasmInterop.wasmImportRoundtripU64(unchecked((long)(a)));
            return unchecked((ulong)(result));
            
            //TODO: free alloc handle (interopString) if exists
        }
        
        internal static class RoundtripS64WasmInterop
        {
            [DllImport("test:numbers/test", EntryPoint = "roundtrip-s64"), WasmImportLinkage]
            internal static extern long wasmImportRoundtripS64(long p0);
        }
        
        internal static unsafe long RoundtripS64(long a)
        {
            var result =  RoundtripS64WasmInterop.wasmImportRoundtripS64(a);
            return result;
            
            //TODO: free alloc handle (interopString) if exists
        }
        
        internal static class RoundtripFloat32WasmInterop
        {
            [DllImport("test:numbers/test", EntryPoint = "roundtrip-float32"), WasmImportLinkage]
            internal static extern float wasmImportRoundtripFloat32(float p0);
        }
        
        internal static unsafe float RoundtripFloat32(float a)
        {
            var result =  RoundtripFloat32WasmInterop.wasmImportRoundtripFloat32(a);
            return result;
            
            //TODO: free alloc handle (interopString) if exists
        }
        
        internal static class RoundtripFloat64WasmInterop
        {
            [DllImport("test:numbers/test", EntryPoint = "roundtrip-float64"), WasmImportLinkage]
            internal static extern double wasmImportRoundtripFloat64(double p0);
        }
        
        internal static unsafe double RoundtripFloat64(double a)
        {
            var result =  RoundtripFloat64WasmInterop.wasmImportRoundtripFloat64(a);
            return result;
            
            //TODO: free alloc handle (interopString) if exists
        }
        
        internal static class RoundtripCharWasmInterop
        {
            [DllImport("test:numbers/test", EntryPoint = "roundtrip-char"), WasmImportLinkage]
            internal static extern int wasmImportRoundtripChar(int p0);
        }
        
        internal static unsafe uint RoundtripChar(uint a)
        {
            var result =  RoundtripCharWasmInterop.wasmImportRoundtripChar(((int)a));
            return unchecked((uint)(result));
            
            //TODO: free alloc handle (interopString) if exists
        }
        
        internal static class SetScalarWasmInterop
        {
            [DllImport("test:numbers/test", EntryPoint = "set-scalar"), WasmImportLinkage]
            internal static extern void wasmImportSetScalar(int p0);
        }
        
        internal static unsafe void SetScalar(uint a)
        {
            SetScalarWasmInterop.wasmImportSetScalar(unchecked((int)(a)));
            
            //TODO: free alloc handle (interopString) if exists
        }
        
        internal static class GetScalarWasmInterop
        {
            [DllImport("test:numbers/test", EntryPoint = "get-scalar"), WasmImportLinkage]
            internal static extern int wasmImportGetScalar();
        }
        
        internal static unsafe uint GetScalar()
        {
            var result =  GetScalarWasmInterop.wasmImportGetScalar();
            return unchecked((uint)(result));
            
            //TODO: free alloc handle (interopString) if exists
        }
        
    }
}

